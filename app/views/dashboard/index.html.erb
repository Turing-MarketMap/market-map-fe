<div class="filters">
  <%= form_with url: '/', method: :get, local: true do |f| %>
    <%= fields_for :search_params do |ff| %>
      <%= ff.label :make %>
      <%= ff.select :make, Listing.all_makes, selected: session[:search_params][:make], include_blank: true%>

      <%= ff.label :model %>
      <%= ff.select :model, Listing.all_models, selected: session[:search_params][:model], include_blank: true%>

      <%= ff.label :min_year %>
      <%= ff.number_field :min_year, value: session[:search_params][:min_year]%>

      <%= ff.label :max_year %>
      <%= ff.number_field :max_year, value: session[:search_params][:max_year]%>

      <%= ff.label :min_price %>
      <%= ff.number_field :min_price%>

      <%= ff.label :max_price %>
      <%= ff.number_field :max_price%>

      <%= ff.label :min_mileage %>
      <%= ff.number_field :min_mileage%>

      <%= ff.label :max_mileage %>
      <%= ff.number_field :max_mileage%>
    <% end %>

  <%= f.submit "Search Listings" %>
  <% end %>
</div>

<div class="js_chart">
  <% if @listings.count > 0 %>
    <canvas id="myChart" width="600" height="200"></canvas>
    <script type="text/javascript">
      var listing_data = JSON.parse('<%= raw(@data.to_json) %>');
      var title = `${listing_data[0].make} ${listing_data[0].model}`
      const ctx = document.getElementById('myChart').getContext('2d');
      const mixedChart = new Chart(ctx, {
        type: 'scatter',
        data: {
            datasets: [{
                type: 'line',
                showLine: false,
                label: 'Listings',
                data: listing_data,
                pointBackgroundColor: 'rgba(0,0,200,1)',
                pointBorderColor: 'rgba(0,0,0,.1)',
                pointRadius: 2,
                pointHoverRadius: 20
            }, {
                type: 'line',
                label: 'Regression',
                //data: [{selling_price: 1, odometer: 1, make: "test"},{selling_price: 1, odometer: 2, make: "test"},{selling_price: 0, odometer: 1, make: "test"},{selling_price: 3, odometer: 3, make: "test"},{selling_price: 2.6, odometer: 2, make: "test"},{selling_price: 1.8, odometer: 1.4, make: "test"}],
                //data: [[0,1.1],[1,1.6], [2,1.6],[2.5,1.9],[3,2.6]],
                borderColor: 'rgba(255,150,150,1)',
                borderJoinStyle: 'bevel',
                borderWidth: 4,
                pointBackgroundColor: 'rgba(200,0,0,1)',
                pointBorderColor: 'rgba(0,0,0,.1)',
            }]
        },
        options: {
          parsing: {
            xAxisKey: 'odometer',
            yAxisKey: 'sellingprice'
          },

          scales: {
            y: { title: { color: 'grey', display: true, text: 'Price' } },
            x: { title: { color: 'grey', display: true, text: 'Mileage' } }
          },

          plugins: {
            title: {
              display: true,
              text: title
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let data = context.dataset.data[context.dataIndex];
                  let label = [''];

                  if (data.title) {
                    label[0] = `${data.title}`;
                  }
                  if (data.sellingprice !== null) {
                    price_label = 'Price: ';
                    price_label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.sellingprice);
                    label.push(price_label);
                  }
                  if (data.odometer !== null) {
                    label.push(`Mileage: ${data.odometer}`);
                  }
                  if (data.condition !== null) {
                    label.push(`Condition: ${data.condition}`);
                  }

                  return label;
                }
              }
            }
          },

          onClick: function clickHandler(evt) {
            const points = mixedChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

            if (points.length) {
              // Gather data from point that is clicked
              const firstPoint = points[0];
              const data = mixedChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
              // redirect to show page with data added to query string
              location.href = `/listings/${data.id}`;
            }
          }
        }
      });
    </script>
  <% else %>
    <h1>Search Returned 0 Results</h1>
  <% end %>
</div>
